import random

import gmpy2

from ntmcrypt.elliptic_curve import elliptic_curve as ec
from ntmcrypt.elliptic_curve import point
from ntmcrypt.elliptic_curve import consts
from ntmcrypt import utils


def get_elliptic_curve(num: int = 1) -> ec.EllipticCurve:
    """function to set the parameters of the elliptic curve. The parameters are
    taken in accordance with GOST 34.10-2012.

    :param num: Elliptic curve parameter number (the number must be greater than 0).
    :return: elliptic curve object.
    """
    if not 0 < num < len(consts.curves):
        raise Exception(f"Error! Invalid elliptic curve index! "
                        f"(Try a range like this 0-{len(consts.curves)})")
    return ec.EllipticCurve(*map(lambda x: gmpy2.mpz(x), consts.curves.get(num)))


def gen_keys(curve: ec.EllipticCurve) -> tuple[gmpy2.mpz, point.Point, point.Point]:
    """Function for generating public and private user keys based on a public elliptic curve.

    :param curve: an elliptical curve that is known to every user.
    :return: private, public keys (point), and a random point from which the public key was built.
    """
    private_key = gmpy2.mpz(random.randint(1, curve.q))
    g = curve.rand_point()
    public_key = g * private_key
    return private_key, public_key, g


def encrypt(
        string: str,
        curve: ec.EllipticCurve,
        other_pub_key: point.Point,
        other_g: point.Point
) -> tuple[point.Point, list[gmpy2.mpz]]:
    """The function of encrypting data (strings) using the El-Gamal cryptosystem using elliptic curves.

    :param string: the string to be encrypted.
    :param curve: the elliptical curve from which the user keys were generated.
    :param other_pub_key: the public key of the user to whom the ciphertext will be sent.
    :param other_g: a random point that was generated by the recipient.
    :return: A dot and a list containing encrypted blocks.
    """
    k = gmpy2.mpz(random.randint(1, curve.q))
    r = other_g * k
    p = other_pub_key * k

    encrypted_blocks = []

    for block in utils.str_to_blocks(string, curve.p):
        encrypted_blocks.append(block * p.x % curve.p)

    return r, encrypted_blocks


def decrypt(
        r: point.Point,
        encrypted_blocks: list[gmpy2.mpz],
        curve: ec.EllipticCurve,
        private_key: gmpy2.mpz
) -> str:
    """A function to decrypt data that has been encrypted with the El-Gamal cryptosystem using elliptic curves.

    :param r: the point that was received by the sender when encrypting the data.
    :param encrypted_blocks: encrypted blocks, each block is a number like mpz.
    :param curve: the elliptical curve from which the user keys were generated.
    :param private_key: your private key.
    :return: decrypted string.
    """
    q = r * private_key

    decrypted_blocks = []

    for block in encrypted_blocks:
        decrypted_blocks.append(block * gmpy2.invert(q.x, curve.p) % curve.p)

    return utils.blocks_to_str(decrypted_blocks)
